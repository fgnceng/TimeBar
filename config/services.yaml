
parameters:
    cache_adapter: cache.adapter.apcu
    locale: 'en'
    images_directory: '%kernel.project_dir%/public/images'
    app.notifications.email_sender: anonymous@example.com


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        # setup special, global autowiring rules
        bind:
            $markdownLogger: '@monolog.logger.markdown'
            $isDebug: '%kernel.debug%'
          #$emailSender: '%app.notifications.email_sender%'
           

    # custom aliases for autowiring
    Nexy\Slack\Client: '@nexy_slack.client'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EventSubscriber\ArticleNotificationSubscriber:
            $sender: '%app.notifications.email_sender%'

    App\EventListener\PasswordTokenReset:
           tags:
             - { name: kernel.event_listener, event: token.reseted, method: resetToken }



sensio_framework_extra:
    request:
        converters: true
        auto_convert: false